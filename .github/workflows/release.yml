# (onpush -> build) -> release
name: Release

#run-name: "Release: ('${{ github.event.workflow.name }}' -> '${{ github.workflow }}') [on ${{ github.event.workflow_run.event }}: ${{ inputs.versionName == '' && github.event.workflow_run.head_branch || inputs.versionName }}]"
run-name: "Release: ['${{ github.event.workflow.name || 'workflow_dispatch' }}' -> '${{ github.workflow }}'] [on ${{ github.event.workflow_run.event }}: ${{ github.event.workflow_run.head_branch || inputs.versionName }}] #Workflow from: ${{github.ref_name}}"
on:

  #! NOTE: This event will only trigger a workflow run if the workflow file is on the default branch.
  workflow_run:
    workflows: [onPush]
    branches:
      # Only run when parent workflow was run on push tags
      #- v[0-9]+.[0-9]+.[0-9]+
      #- test1
    types:
      - completed

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      versionName:
        description: 'Name of version  (ie v5.5.0) same as tag name'
        required: true
      isDraft:
        description: 'Should we create a draft release?'
        required: false
        default: true
        type: boolean

permissions:
  contents: write

jobs:

  release:
    # Run if this was fired from a success worflow_run or workflow_dispatch (in wich case workflow_run.conclusion would be empty)
    if: ${{ contains(fromJson('["success", ""]'), github.event.workflow_run.conclusion) || (github.event_name == 'workflow_dispatch') }}

    runs-on:  ubuntu-latest

    steps:

      - name: Set github envs for debug
        run: echo 'Set github envs for debug' #'${{ toJSON(needs) }}'
        env:
          GITHUB_JSON: ${{ toJSON(github) }}
          NEEDS_JSON: ${{ toJSON(needs) }}
          ENV_JSON: ${{ toJSON(env) }}
          INPUTS_JSON: ${{ toJSON(inputs) }}
        working-directory: "."

      # Alternative on https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_run
      # Download artifacts from the last run of build_on_tag (cleaner method that works on workflow_dispatch (no run_id))
      # Do not specify pr, commit, branch, run_id together or workflow_conclusion and run_id together. Pick just one of each or none.
      - name: Download artifact Linux
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: onpush.yml
          workflow_conclusion: success # for when this is a workflow_dispatch
          github_token: ${{secrets.GITHUB_TOKEN}}
          commit: ${{ inputs.versionName }} # TODO: check if this works.
          #run_id: ${{ github.event.workflow_run.id }} # workflow_conclusion is already defined.
          run_number: ${{ github.event.workflow_run.run_number }} # (caller run number) if null, default is to take the last successful run
          branch: ${{ github.event.workflow_run.head_branch }}
          path: releases
          skip_unpack: true

      # We need the build-data to get the correct CHANGELOG from built git ref.
      - name: Expand build-data
        run: |
          unzip ./releases/build-data.zip -d ./build-data
          rm ./releases/build-data.zip
          BUILD_REF=$(cat ./build-data/ref)
          COMPILED_VERSION=$(cat ./build-data/version)
          DART_POLISHER_BRANCH=$(cat ./build-data/dpbranch)

          echo "BUILD_REF=$BUILD_REF" >> $GITHUB_ENV
          echo "COMPILED_VERSION=$COMPILED_VERSION" >> $GITHUB_ENV
          echo "DART_POLISHER_BRANCH=$DART_POLISHER_BRANCH" >> $GITHUB_ENV

          echo "$BUILD_REF"
          echo "$COMPILED_VERSION"
          echo "$DART_POLISHER_BRANCH"

      - name: Display structure of downloaded files
        run: ls -R

      # workflow_run | workflow_dispatch : ${{github.event_name}}
      - name: "Setup variables"
        shell: bash
        run: |
          # Parent workflow is on an push tag event, so this head_branch will be a version.
          if [[ "${{github.event_name}}" == "workflow_run" ]]; then
              # TODO: in workflow_dispatch this is the original ref (master for example) not the BUILT ref. See how to get env from triggering workflow.
              CHECKOUT_TAG=${{ env.BUILD_REF }}
              RELEASE_IS_DRAFT=true
          fi
          if [[ "${{github.event_name}}" == "workflow_dispatch" ]]; then
              CHECKOUT_TAG=${{ inputs.versionName }}
              RELEASE_IS_DRAFT=${{ inputs.isDraft }}
          fi
          if [[ "$CHECKOUT_TAG" == "" ]]; then
              echo "CHECKOUT_TAG is null, something when wront when selecting a git tag from event: ${{github.event_name}}"
              exit 1
          fi
          echo "CHECKOUT_TAG=$CHECKOUT_TAG" >> $GITHUB_ENV
          echo "Using $CHECKOUT_TAG as tag to checkout ${GITHUB_REPOSITORY#*/}"
          echo "RELEASE_IS_DRAFT=$RELEASE_IS_DRAFT" >> $GITHUB_ENV
          echo "Releasing a draft?: '$RELEASE_IS_DRAFT'"

      # To have access to CHANGELOG.md
      - name: "Checkout local repository"
        uses: actions/checkout@v3
        with:
          ref: ${{ env.CHECKOUT_TAG }}

      - name: Display structure of downloaded files
        run: ls -R

      # steps.create_release.outputs.upload_url   has the URL
      - name: Generate release data using Markdown
        run: |
          echo "### :rocket: Release data:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Release url: ${{ steps.create_release.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "- Release ID: ${{ steps.create_release.outputs.id }}" >> $GITHUB_STEP_SUMMARY
          echo "- Upload url: ${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_STEP_SUMMARY
