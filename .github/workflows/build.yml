# (onpush -> build) -> release
name: build

###
#  Builds native executables for [linux,windows,mac] when called or manually triggered.
#    input 'target' can be set to '--last-release' when called, it builds the last release tag.
#    (Releases are done in semantic tags example: "v1.2.3" on master branch)
#  Uploads all output files as 'dartpolishd-${{ matrix.output-name }}'
#  This output format is ready for use by the vscode polisher extension.


# https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_call
# NOTE: Payload is the same as the caller.
# run-name is not used when on a workflow_call
run-name: "Build ${{ github.repository }} ('${{ github.job }}' -> '${{ github.workflow }}') [target: ${{ inputs.branch || github.event.inputs.target }}]"

# Controls when the workflow will run
on:
  # {{ github }} {{ inputs }} context is inherited from caller (except github.job).
  workflow_call:
    inputs:
      target:
        description: "'--last-release' (use the last release) | '<ref>' (commit/tag/branch) | '' (use caller <ref>)"
        required: false
        type: string
        default: "${{ github.ref_name }}"

  # Allows you to run this workflow manually from the Actions tab (for testing)
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch/Tag/Commit to build (defaults to selected ref when fired manually)'
        required: false
      polisher_branch:
        description: 'Dart Polisher branch to use when building (defaults to stable branch)'
        required: false
        default: 'stable'

# run action will be from this dir
defaults:
  run:
    working-directory: formatter_server

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on:  ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      - name: Set github envs for debug
        run: echo 'Set github envs for debug' #'${{ toJSON(needs) }}'
        env:
          GITHUB_JSON: ${{ toJSON(github) }}
          NEEDS_JSON: ${{ toJSON(needs) }}
          ENV_JSON: ${{ toJSON(env) }}
          INPUTS_JSON: ${{ toJSON(inputs) }}
        working-directory: "."

      - name: Display structure of downloaded files
        run: |
          ls -R
        working-directory: "."

      # https://github.com/actions/checkout
      - name: "Clone formatter_server repository"
        uses: actions/checkout@v3
        with:
          repository: tekert/test-gh-actions1
          path: formatter_server
          #ref: master # gets the event ref if this is empty.

      # workflow_run | workflow_dispatch : ${{github.event_name}}; workflow_call : ${{(PARENT)github.event_name}};
      # Means github.event_name on a workflow_call its not an individual event, its the caller event, (its better to just check if the inputs are not null).
      - name: "Setup variables"
        shell: bash
        run: |
          # Setup build modes from event type
          echo "Getting tags..."
          git fetch --tags -f

          echo "Github event: ${{ github.event_name }}"

          echo "Getting repo name..."
          REPO_NAME=${GITHUB_REPOSITORY#*/}
          echo "Parsing $REPO_NAME build ref..."
          BUILD_REF=${{ github.ref_name }}
          DART_POLISHER_BRANCH="stable"
          # if this is a workflow_call then
          if [[ "${{ inputs.target }}" != "" ]]; then
              if [[ "${{ inputs.target }}" == "--last-release" ]]; then
                  # Gets the last tag release name.
                  BUILD_REF=$(git tag --sort=-creatordate | awk 'match($0, /^v[0-9]+\.[0-9]+\.[0-9]+$/)' | head -n 1)
              else
                  BUILD_REF=${{ inputs.target }}
              fi
          fi
          # workflow_dispatch (github.event_name) can be from the caller or the called
          # To check in wich event we are, just check if the local input exists.
          if [[ "${{ inputs.branch }}" != "" ]]; then
              echo "workflow_dispatch ref: ${{ inputs.branch }}"
              BUILD_REF="${{ inputs.branch }}"
              DART_POLISHER_BRANCH=${{ inputs.polisher_branch }}
          fi
          echo "BUILD_REF=$BUILD_REF" >> $GITHUB_ENV
          echo "Using $REPO_NAME@$BUILD_REF for checkout"
          # TODO: delete DART_POLISHER_BRANCH when going open source, control wich branch from pubspec/grinder.
          echo "DART_POLISHER_BRANCH=$DART_POLISHER_BRANCH" >> $GITHUB_ENV
          echo "Using $DART_POLISHER_BRANCH brach for dart_polisher"

          # turn the detached message off
          git config --global advice.detachedHead false
          echo "Checking out $REPO_NAME@$BUILD_REF..."
          git checkout $BUILD_REF

      - name: "Formatter Server status"
        run: git status
        working-directory: formatter_server


      # https://github.com/actions/upload-artifact#zipped-artifact-downloads
      - name: "Upload all artifacts"
        uses: actions/upload-artifact@v3.1.0
        with:
          name: native-executables
          path: formatter_server/README.md
          retention-days: 5

      # This is in a matrix, so only output this info from one OS
      - name: Generate release data using Markdown
        if: true
        run: |
          echo 'Compiled from git ref: `${{ env.BUILD_REF }}`' >> $GITHUB_STEP_SUMMARY
          echo 'Compiled version: **${{ env.COMPILED_VERSION }}**' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo 'Event name: `${{ github.event_name }}`' >> $GITHUB_STEP_SUMMARY
          echo 'Workflow: `${{ github.workflow }}`' >> $GITHUB_STEP_SUMMARY
          echo 'Called from workflow: `${{ github.workflow }}`' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          printf 'Inputs:\n```json\n ${{ toJSON(inputs) }}\n```\n' >> $GITHUB_STEP_SUMMARY
          printf 'Caller inputs:\n```json\n ${{ toJSON(github.event.inputs) }}\n```\n' >> $GITHUB_STEP_SUMMARY
        shell: bash
