name: test3
run-name: "Build ${{ github.repository }} from: ${{ github.event.workflow.name }} -> ${{ github.workflow }} (target: @${{ inputs.branch }}${{ github.event.inputs.target }})"

# Controls when the workflow will run
on:
  workflow_call:
    inputs:
      target:
        description: "'last-release' | 'commit/branch/tag'"
        required: false
        type: string
        default: "last-release"

  # Allows you to run this workflow manually from the Actions tab (for testing)
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build (defaults to default branch)'
        required: false
      polisher_branch:
        description: 'Dart Polisher branch to use when building (defaults to stable branch)'
        required: false
        default: 'stable'

# run action will be from this dir
defaults:
  run:
    working-directory: formatter_server

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on:  ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      - name: Display structure of downloaded files
        run: |
          cd ..
          ls -R

      # https://github.com/actions/checkout
      - name: "Clone formatter_server repository"
        uses: actions/checkout@v3
        with:
          repository: tekert/test-gh-actions1
          path: formatter_server
          #token: ${{ secrets.GH_PAT }} # TODO: delete this line when going open source.
          ref: ${{ inputs.branch }} # gets default branch if input is not given.

      # workflow_run | workflow_dispatch : ${{github.event_name}}
      - name: "Setup build modes from event type"
        shell: bash
        run: |
          echo "Getting tags..."
          git fetch --tags

          echo "Getting repo name..."
          REPO_NAME=${GITHUB_REPOSITORY#*/}
          echo "Parsing $REPO_NAME build ref..."
          BUILD_REF="master"
          DART_POLISHER_BRANCH="stable"
          if [[ "${{ github.event_name }}" == "workflow_call" ]]; then
              if [[ "${{ inputs.target }}" == "last_release" ]]; then
                  BUILD_REF=$(git tag --sort=-creatordate | awk 'match($0, /^v[0-9]+\.[0-9]+\.[0-9]+$/)' | head -n 1)
              else
                  BUILD_REF=${{ inputs.target }}
              fi
              DART_POLISHER_BRANCH=${{ inputs.polisher_branch }}
          fi
          if [[ "${{github.event_name}}" == "workflow_dispatch" ]]; then
              BUILD_REF="${{ inputs.branch }}"
          fi
          echo "BUILD_REF=$BUILD_REF" >> $GITHUB_ENV
          echo "Using $REPO_NAME@$BUILD_REF for checkout"
          # TODO: delete DART_POLISHER_BRANCH when going open source, control wich branch from pubspec/grinder.
          echo "DART_POLISHER_BRANCH=$DART_POLISHER_BRANCH" >> $GITHUB_ENV
          echo "Using $DART_POLISHER_BRANCH brach for dart_polisher"

          # turn the detached message off
          git config --global advice.detachedHead false
          echo "Checking out $REPO_NAME@$BUILD_REF..."
          git checkout $BUILD_REF

      - name: "Formatter Server status"
        run: git status
        working-directory: formatter_server


      # https://github.com/actions/upload-artifact#zipped-artifact-downloads
      - name: "Upload all artifacts"
        uses: actions/upload-artifact@v3.1.0
        with:
          name: native-executables
          path: README.md
          retention-days: 5
